services:
  pd0:
    image: pingcap/pd:latest
    container_name: bigpods-tidb-pd0
    ports:
      - '2379'
    volumes:
      - ./docker/tidb/pd.toml:/pd.toml:ro
      - tidb-data-volume:/data
      - tidb-logs-volume:/logs
    command:
      - --name=pd0
      - --client-urls=http://0.0.0.0:2379
      - --peer-urls=http://0.0.0.0:2380
      - --advertise-client-urls=http://pd0:2379
      - --advertise-peer-urls=http://pd0:2380
      - --initial-cluster=pd0=http://pd0:2380,pd1=http://pd1:2380
      - --data-dir=/data/pd0
      - --config=/pd.toml
      - --log-file=/logs/pd0.log
    restart: on-failure
    networks:
      - tidb-network

  pd1:
    image: pingcap/pd:latest
    container_name: bigpods-tidb-pd1
    ports:
      - '2379'
    volumes:
      - ./docker/tidb/pd.toml:/pd.toml:ro
      - tidb-data-volume:/data
      - tidb-logs-volume:/logs
    command:
      - --name=pd1
      - --client-urls=http://0.0.0.0:2379
      - --peer-urls=http://0.0.0.0:2380
      - --advertise-client-urls=http://pd1:2379
      - --advertise-peer-urls=http://pd1:2380
      - --initial-cluster=pd0=http://pd0:2380,pd1=http://pd1:2380
      - --data-dir=/data/pd1
      - --config=/pd.toml
      - --log-file=/logs/pd1.log
    restart: on-failure
    networks:
      - tidb-network

  tikv0:
    image: pingcap/tikv:latest
    container_name: bigpods-tidb-tikv0
    volumes:
      - ./docker/tidb/tikv.toml:/tikv.toml:ro
      - tidb-data-volume:/data
      - tidb-logs-volume:/logs
    command:
      - --addr=0.0.0.0:20160
      - --advertise-addr=tikv0:20160
      - --data-dir=/data/tikv0
      - --pd=pd0:2379,pd1:2379
      - --config=/tikv.toml
      - --log-file=/logs/tikv0.log
    depends_on:
      - 'pd0'
      - 'pd1'
    restart: on-failure
    networks:
      - tidb-network

  tikv1:
    image: pingcap/tikv:latest
    container_name: bigpods-tidb-tikv1
    volumes:
      - ./docker/tidb/tikv.toml:/tikv.toml:ro
      - tidb-data-volume:/data
      - tidb-logs-volume:/logs
    command:
      - --addr=0.0.0.0:20160
      - --advertise-addr=tikv1:20160
      - --data-dir=/data/tikv1
      - --pd=pd0:2379,pd1:2379
      - --config=/tikv.toml
      - --log-file=/logs/tikv1.log
    depends_on:
      - 'pd0'
      - 'pd1'
    restart: on-failure
    networks:
      - tidb-network

  tidb:
    image: pingcap/tidb:latest
    container_name: bigpods-tidb
    ports:
      - '${TIDB_PORT}:4000'
      - '10080:10080'
    volumes:
      - ./docker/tidb/tidb.toml:/tidb.toml:ro
      - tidb-logs-volume:/logs
    command:
      - --store=tikv
      - --path=pd0:2379,pd1:2379
      - --config=/tidb.toml
      - --log-file=/logs/tidb.log
      - --advertise-address=tidb
    depends_on:
      - 'tikv0'
      - 'tikv1'
    restart: on-failure
    networks:
      - tidb-network

  redpanda-volume:
    command:
      - redpanda
      - start
      - --kafka-addr internal://0.0.0.0:9092,external://0.0.0.0:19092
      # Address the broker advertises to clients that connect to the Kafka API.
      # Use the internal addresses to connect to the Redpanda brokers'
      # from inside the same Docker network.
      # Use the external addresses to connect to the Redpanda brokers'
      # from outside the Docker network.
      - --advertise-kafka-addr internal://redpanda-volume:9092,external://localhost:19092
      - --pandaproxy-addr internal://0.0.0.0:8082,external://0.0.0.0:18082
      # Address the broker advertises to clients that connect to the HTTP Proxy.
      - --advertise-pandaproxy-addr internal://redpanda-volume:8082,external://localhost:18082
      - --schema-registry-addr internal://0.0.0.0:8081,external://0.0.0.0:18081
      # Redpanda brokers use the RPC API to communicate with each other internally.
      - --rpc-addr redpanda-volume:33145
      - --advertise-rpc-addr redpanda-volume:33145
      # Mode dev-container uses well-known configuration properties for development in containers.
      - --mode dev-container
      # Tells Seastar (the framework Redpanda uses under the hood) to use 1 core on the system.
      - --smp 1
      - --default-log-level=info
    image: docker.redpanda.com/redpandadata/redpanda:v24.1.6
    container_name: bigpods-redpanda-volume
    volumes:
      - redpanda-volume:/var/lib/redpanda/data
    networks:
      - redpanda-network
    ports:
      - 18081:18081
      - 18082:18082
      - ${REDPANDA_QUEUE_PORT}:19092
      - 19644:9644

  redpanda-console:
    container_name: bigpods-redpanda-console
    image: docker.redpanda.com/redpandadata/console:v2.6.0
    networks:
      - redpanda-network
    entrypoint: /bin/sh
    command: -c 'echo "$$CONSOLE_CONFIG_FILE" > /tmp/config.yml; /app/console'
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["redpanda-volume:9092"]
          schemaRegistry:
            enabled: true
            urls: ["http://redpanda-volume:8081"]
        redpanda:
          adminApi:
            enabled: true
            urls: ["http://redpanda-volume:9644"]
    ports:
      - ${REDPANDA_CONSOLE_PORT}:8080
    depends_on:
      - redpanda-volume

  postgres:
    image: postgres:11.21-alpine3.17
    container_name: bigpods-postgres
    restart: always
    hostname: postgres.localhost
    environment:
      POSTGRES_USER: ${KEYCLOAK_DB_USER}
      POSTGRES_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
      POSTGRES_DB: ${KEYCLOAK_DB_NAME}
    ports:
      - 5432:5432
    volumes:
      - keycloak-volume:/var/lib/postgresql/data
    networks:
      - keycloak-network

  keycloak:
    image: bigpods/keycloak
    build:
      dockerfile: ./docker/keycloak/Dockerfile
    container_name: bigpods-keycloak
    restart: always
    depends_on:
      - postgres
    environment:
      KC_DB: postgres
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN_USER}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_DB_USERNAME: ${KEYCLOAK_DB_USER}
      KC_DB_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
      KC_DB_URL: jdbc:postgresql://postgres.localhost/bigpods
      KC_HOSTNAME: localhost
      # KEYCLOAK_USER: ${KEYCLOAK_DB_USER}
    ports:
      - 8082:8080
      - 8443:8443
    networks:
      - keycloak-network

  minio:
    image: quay.io/minio/minio
    container_name: bigpods-minio
    restart: always
    environment:
      MINIO_ROOT_USER: ${DEPOSIT_USER}
      MINIO_ROOT_PASSWORD: ${DEPOSIT_PASSWORD}
    command: server /data --console-address ":9001"
    ports:
      - 9000:9000
      - 9001:9001
    volumes:
      - minio-volume:/data
    networks:
      - minio-network

volumes:
  tidb-data-volume:
    driver: local
    name: bigpods-tidb-data-volume
  tidb-logs-volume:
    driver: local
    name: bigpods-tidb-logs-volume
  redpanda-volume:
    driver: local
    name: bigpods-redpanda-volume
  keycloak-volume:
    driver: local
    name: bigpods-keycloak-volume
  cockroachdb-volume:
    driver: local
    name: bigpods-cockroachdb-volume
  minio-volume:
    driver: local
    name: bigpods-minio-volume

networks:
  tidb-network:
    name: bigpods-tidb-network
    driver: bridge
  redpanda-network:
    name: bigpods-redpanda-network
    driver: bridge
  keycloak-network:
    name: bigpods-keycloak-network
    driver: bridge
  minio-network:
    name: bigpods-minio-network
    driver: bridge
